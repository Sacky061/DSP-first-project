import ballerina/grpc;
import ballerina/log;

listener grpc:Listener ep = new (9090);



service caliSystemService on ep {
    //The implementation here ia to allow is for entries to be held in memory during the system running
    resource function addRecord(grpc:Caller caller, RecordInfo value,json content, string path) {
        map<RecordInfo> recordmap = {};

        string ID = value.RecID;
        recordmap[value.RecID] = value;

        string payload = "Recorcd Created, ID is " + ID;

        error? result = caller->send(payload);
        result = caller->complete();
        if (result is error) {
            log:printError("Error from Connector: " + result.reason() + " - " + <string>result.detail()["message"] + "\n");
        }
        
    }
    
    resource function updateRecord(grpc:Caller caller, RecordInfo value) {
        // Implementation goes here.

        // You should return a string
    }
    resource function viewRecord(grpc:Caller caller, string value) {
        // Implementation goes here.

        // You should return a string
    }
}

public type RecordInfo record {|
    string RecID = "";
    string artistName = "";
    string artistMembership = "";
    string songTitle = "";
    string songGenre = "";
    string songPlatform = "";
    string band = "";
    string date = "";
    
|};



const string
function getDescriptorMap() returns map<string> {
    return {
        "CaliSys.proto
        "google/protobuf/wrappers.proto
        
    };
}

