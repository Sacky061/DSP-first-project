import ballerina/grpc;
import ballerina/io;
import ballerina/log;

listener grpc:Listener ep = new (9092);

//USING This variable to allow the user to enter a file name for the json file(currently not functional)
        string fileName = "Record";
    
        //path to json file location
        string filePath = "./files/" + fileName + ".json";
        

service cali on ep {
   
    resource function addRecord(grpc:Caller caller, addRequest value, json content, string path, io:WritableCharacterChannel wc) returns @tainted error?{ //, io:ReadableCSVChannel csvChannel, io:WritableCSVChannel wCsvChannel)
        //Create an object of type updateRequest check caller->send(resp);(to enable addition of key)
        check caller->send("Server is processing......");

        //Craete a json from the user provided informtion and hashfunction key
        
        json newSong = {
            songKey: "hashFunction Provides",
            songVersion: value.songVersion,
            date: value.date,
            allArtists: value.allArtists,
            band: value.band,
            songDetails: value.songDetails

        }; 
       

        //Open Write Channel
    
        io:WritableByteChannel wbc = check io:openWritableFile(path);

        io:WritableCharacterChannel wch = new (wbc, "UTF8");
        var result = wch.writeJson(content);
        closeWc(wch);
        return result;

                
        io:println("WRITING TO JSON FILE.......");

        var wResult = write(j1, filePath);
        if (wResult is error) {
        log:printError("Error occurred while writing json: ", wResult);
        } else {
        io:println("Preparing to read the content written");
        }
        var rResult = read(filePath);
        if (rResult is error) {
            log:printError("Error occurred while reading json: ",
                            err = rResult);
        } else {
            io:println(rResult.toJsonString());
        }
      
    //Close write channel

        var result = wc.close();
        if (result is error) {
            log:printError("Error occurred while closing character stream",err = result);
        }        
        
        addResponse resp = {
                addStatus: "Record Successfully Added",
                songVersion: value.songVersion,
                songKey: update.songKey
                };

                check caller->send(resp);
                 check caller->complete();

    }
    resource function updateRecord(grpc:Caller caller, updateRequest value, string path) {
        // Implementation goes here.
        json newSong = {
            songKey: "hashFunction Provides",
            songVersion: value.songVersion,
            date: value.date,
            allArtists: value.allArtists,
            band: value.band,
            songDetails: value.songDetails

        }; 
       

        //Open Write Channel
    
        io:WritableByteChannel wbc = check io:openWritableFile(path);

        io:WritableCharacterChannel wch = new (wbc, "UTF8");
        var result = wch.writeJson(content);
        closeWc(wch);
        return result;

                
        io:println("WRITING TO JSON FILE.......");

        var wResult = write(j1, filePath);
        if (wResult is error) {
        log:printError("Error occurred while writing json: ", wResult);
        } else {
        io:println("Preparing to read the content written");
        }
        var rResult = read(filePath);
        if (rResult is error) {
            log:printError("Error occurred while reading json: ",
                            err = rResult);
        } else {
            io:println(rResult.toJsonString());
        }
      
    //Close write channel

        var result = wc.close();
        if (result is error) {
            log:printError("Error occurred while closing character stream",err = result);
        }        
        
        addResponse resp = {
                addStatus: "Record Successfully Added",
                songVersion: value.songVersion,
                songKey: update.songKey
                };

                check caller->send(resp);
                 check caller->complete();
        // You should return a updateResponse
    }
    resource function readRecord(grpc:Caller caller, readRequest value, string path) {
        // Implementation goes here.
         io:ReadableByteChannel rbc = check io:openReadableFile(path);

        io:ReadableCharacterChannel rch = new (rbc, "UTF8");
        var result = rch.readJson();
        closeRc(rch);
        return result;

        //Close read channel 

        
        var result = rc.close();
        if (result is error) {
        log:printError("Error occurred while closing character stream",err = result);
        }
        // You should return a readResponse
    }
}

public type addRequest record {|
    string songVersion = "";
    string date = "";
    artistDetails[] allArtists = [];
    string band = "";
    song[] songDetails = [];
    
|};

public type artistDetails record {|
    string name = "";
    string member = "";
    
|};


public type song record {|
    string title = "";
    string genre = "";
    string platform = "";
    
|};


public type updateRequest record {|
    string songKey = "";
    string songVersion = "";
    string date = "";
    updateartistDetails[] allArtists = [];
    string band = "";
    updatesong[] songDetails = [];
    
|};

public type updateartistDetails record {|
    string name = "";
    string member = "";
    
|};


public type updatesong record {|
    string title = "";
    string genre = "";
    string platform = "";
    
|};


public type readRequest record {|
    string songKey = "";
    string songVersion = "";
    string date = "";
    readartistDetails[] allArtists = [];
    string band = "";
    readsong[] songDetails = [];
    
|};

public type readartistDetails record {|
    string name = "";
    string member = "";
    
|};


public type readsong record {|
    string title = "";
    string genre = "";
    string platform = "";
    
|};


public type addResponse record {|
    string addStatus = "";
    string songVersion = "";
    string songKey = "";
    
|};

public type updateResponse record {|
    string updateStatus = "";
    updateRequest? newVersion = ();
    
|};

public type readResponse record {|
    string readStatus = "";
    updateRequest[] readResult = [];
    
|};



const string
function getDescriptorMap() returns map<string> {
    return {
        "Ass1.proto
        
    };
}

