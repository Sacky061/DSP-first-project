import ballerina/grpc;

public type caliBlockingClient client object {

    *grpc:AbstractClientEndpoint;

    private grpc:Client grpcClient;

    public function __init(string url, grpc:ClientConfiguration? config = ()) {
        // initialize client endpoint.
        self.grpcClient = new(url, config);
        checkpanic self.grpcClient.initStub(self, "blocking", ROOT_DESCRIPTOR, getDescriptorMap());
    }

    public remote function addRecord(addRequest req, grpc:Headers? headers = ()) returns ([addResponse, grpc:Headers]|grpc:Error) {
        
        var payload = check self.grpcClient->blockingExecute("cali/addRecord", req, headers);
        grpc:Headers resHeaders = new;
        anydata result = ();
        [result, resHeaders] = payload;
        
        return [<addResponse>result, resHeaders];
        
    }

    public remote function updateRecord(updateRequest req, grpc:Headers? headers = ()) returns ([updateResponse, grpc:Headers]|grpc:Error) {
        
        var payload = check self.grpcClient->blockingExecute("cali/updateRecord", req, headers);
        grpc:Headers resHeaders = new;
        anydata result = ();
        [result, resHeaders] = payload;
        
        return [<updateResponse>result, resHeaders];
        
    }

    public remote function readRecord(readRequest req, grpc:Headers? headers = ()) returns ([readResponse, grpc:Headers]|grpc:Error) {
        
        var payload = check self.grpcClient->blockingExecute("cali/readRecord", req, headers);
        grpc:Headers resHeaders = new;
        anydata result = ();
        [result, resHeaders] = payload;
        
        return [<readResponse>result, resHeaders];
        
    }

};

public type caliClient client object {

    *grpc:AbstractClientEndpoint;

    private grpc:Client grpcClient;

    public function __init(string url, grpc:ClientConfiguration? config = ()) {
        // initialize client endpoint.
        self.grpcClient = new(url, config);
        checkpanic self.grpcClient.initStub(self, "non-blocking", ROOT_DESCRIPTOR, getDescriptorMap());
    }

    public remote function addRecord(addRequest req, service msgListener, grpc:Headers? headers = ()) returns (grpc:Error?) {
        
        return self.grpcClient->nonBlockingExecute("cali/addRecord", req, msgListener, headers);
    }

    public remote function updateRecord(updateRequest req, service msgListener, grpc:Headers? headers = ()) returns (grpc:Error?) {
        
        return self.grpcClient->nonBlockingExecute("cali/updateRecord", req, msgListener, headers);
    }

    public remote function readRecord(readRequest req, service msgListener, grpc:Headers? headers = ()) returns (grpc:Error?) {
        
        return self.grpcClient->nonBlockingExecute("cali/readRecord", req, msgListener, headers);
    }

};

public type addRequest record {|
    string songVersion = "";
    string date = "";
    artistDetails[] allArtists = [];
    string band = "";
    song[] songDetails = [];
    
|};

public type artistDetails record {|
    string name = "";
    string member = "";
    
|};


public type song record {|
    string title = "";
    string genre = "";
    string platform = "";
    
|};



public type updateRequest record {|
    string songKey = "";
    string songVersion = "";
    string date = "";
    updateartistDetails[] allArtists = [];
    string band = "";
    updatesong[] songDetails = [];
    
|};

public type updateartistDetails record {|
    string name = "";
    string member = "";
    
|};


public type updatesong record {|
    string title = "";
    string genre = "";
    string platform = "";
    
|};



public type readRequest record {|
    string songKey = "";
    string songVersion = "";
    string date = "";
    readartistDetails[] allArtists = [];
    string band = "";
    readsong[] songDetails = [];
    
|};

public type readartistDetails record {|
    string name = "";
    string member = "";
    
|};


public type readsong record {|
    string title = "";
    string genre = "";
    string platform = "";
    
|};



public type addResponse record {|
    string addStatus = "";
    string songVersion = "";
    string songKey = "";
    
|};


public type updateResponse record {|
    string updateStatus = "";
    updateRequest? newVersion = ();
    
|};


public type readResponse record {|
    string readStatus = "";
    updateRequest[] readResult = [];
    
|};



const string
function getDescriptorMap() returns map<string> {
    return {
        "Ass1.proto
        
    };
}

