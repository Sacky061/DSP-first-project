import ballerina/grpc;

public type caliBlockingClient client object {

    *grpc:AbstractClientEndpoint;

    private grpc:Client grpcClient;

    public function __init(string url, grpc:ClientConfiguration? config = ()) {
        // initialize client endpoint.
        self.grpcClient = new(url, config);
        checkpanic self.grpcClient.initStub(self, "blocking", ROOT_DESCRIPTOR, getDescriptorMap());
    }

    public remote function addRecord(addRequest req, grpc:Headers? headers = ()) returns ([addResponse, grpc:Headers]|grpc:Error) {
        
        var payload = check self.grpcClient->blockingExecute("cali/addRecord", req, headers);
        grpc:Headers resHeaders = new;
        anydata result = ();
        [result, resHeaders] = payload;
        
        return [<addResponse>result, resHeaders];
        
    }

    public remote function updateRecord(updateRequest req, grpc:Headers? headers = ()) returns ([updateResponse, grpc:Headers]|grpc:Error) {
        
        var payload = check self.grpcClient->blockingExecute("cali/updateRecord", req, headers);
        grpc:Headers resHeaders = new;
        anydata result = ();
        [result, resHeaders] = payload;
        
        return [<updateResponse>result, resHeaders];
        
    }

    public remote function readRecord(readRequest req, grpc:Headers? headers = ()) returns ([readResponse, grpc:Headers]|grpc:Error) {
        
        var payload = check self.grpcClient->blockingExecute("cali/readRecord", req, headers);
        grpc:Headers resHeaders = new;
        anydata result = ();
        [result, resHeaders] = payload;
        
        return [<readResponse>result, resHeaders];
        
    }

};

public type caliClient client object {

    *grpc:AbstractClientEndpoint;

    private grpc:Client grpcClient;

    public function __init(string url, grpc:ClientConfiguration? config = ()) {
        // initialize client endpoint.
        self.grpcClient = new(url, config);
        checkpanic self.grpcClient.initStub(self, "non-blocking", ROOT_DESCRIPTOR, getDescriptorMap());
    }

    public remote function addRecord(addRequest req, service msgListener, grpc:Headers? headers = ()) returns (grpc:Error?) {
        
        return self.grpcClient->nonBlockingExecute("cali/addRecord", req, msgListener, headers);
    }

    public remote function updateRecord(updateRequest req, service msgListener, grpc:Headers? headers = ()) returns (grpc:Error?) {
        
        return self.grpcClient->nonBlockingExecute("cali/updateRecord", req, msgListener, headers);
    }

    public remote function readRecord(readRequest req, service msgListener, grpc:Headers? headers = ()) returns (grpc:Error?) {
        
        return self.grpcClient->nonBlockingExecute("cali/readRecord", req, msgListener, headers);
    }

};

public type addRequest record {|
    record {| string key; string value; |}[] songrecord = [];
|};


public type updateRequest record {|
    record {| string key; string value; |}[] songrecord = [];
|};


public type readRequest record {|
    record {| string key; string value; |}[] songrecord = [];
|};


public type addResponse record {|
    record {| string key; string value; |}[] songrecord = [];
|};


public type updateResponse record {|
    record {| string key; string value; |}[] songrecord = [];
|};


public type readResponse record {|
    record {| string key; string value; |}[] songrecord = [];
|};



const string
function getDescriptorMap() returns map<string> {
    return {
        "protoFile.proto
        
    };
}

