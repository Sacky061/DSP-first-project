import ballerina/grpc;

listener grpc:Listener ep = new (9090);

service cali on ep {

    resource function addRecord(grpc:Caller caller, addRequest value) {
        // Implementation goes here.

        // You should return a addResponse
    }
    resource function updateRecord(grpc:Caller caller, updateRequest value) {
        // Implementation goes here.

        // You should return a updateResponse
    }
    resource function readRecord(grpc:Caller caller, readRequest value) {
        // Implementation goes here.

        // You should return a readResponse
    }
}

public type addRequest record {|
    record {| string key; string value; |}[] songrecord = [];
|};

public type updateRequest record {|
    record {| string key; string value; |}[] songrecord = [];
|};

public type readRequest record {|
    record {| string key; string value; |}[] songrecord = [];
|};

public type addResponse record {|
    record {| string key; string value; |}[] songrecord = [];
|};

public type updateResponse record {|
    record {| string key; string value; |}[] songrecord = [];
|};

public type readResponse record {|
    record {| string key; string value; |}[] songrecord = [];
|};



const string
function getDescriptorMap() returns map<string> {
    return {
        "protoFile.proto
        
    };
}

